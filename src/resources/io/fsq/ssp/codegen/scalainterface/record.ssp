<%
  // Copyright 2017 Foursquare Labs Inc. All Rights Reserved.
  import _root_.io.fsq.spindle.codegen.runtime.{ProgramSource, ScalaProgram}
  import java.net.InetAddress
  import org.joda.time.DateTime
%>
<%@ val program: ScalaProgram %>
<%@ val source: ProgramSource %>
<%@ val templatePath: String %>
<%@ val version: String %>
<% val pkg = program.pkg.getOrElse("") %>
#if (program.pkg.isDefined)
package ${pkg}
#else
// WARNING: No package statement because no java namespace specified in Thrift file.
#end

<%
  val importsToAdd = new scala.collection.mutable.HashSet[String]()
  importsToAdd.add("io.fsq.spindle.runtime")
  importsToAdd.add("org.apache.thrift")
  if (program.services.nonEmpty) {
    importsToAdd.add("com.twitter.util.{Future => _Future}")
  }
  if (program.structs.nonEmpty) {
    importsToAdd.add("org.apache.thrift.protocol.{TField => _TField}")
    importsToAdd.add("org.apache.thrift.{TFieldIdEnum => _TFieldIdEnum}")
  }
  val orderedInputs = importsToAdd.toVector.sorted
%>
#for (input <- orderedInputs)
import ${input}
#end
#if (program.constants.nonEmpty)
<% render("constants.ssp", Map("constants" -> program.constants, "baseName" -> source.capitalizedBaseName)) %>
#end
#for (enum <- program.enums)
<% render("enum.ssp", Map("enum" -> enum, "pkg" -> pkg)) %>
#end
#if (program.typedefs.nonEmpty)
<% render("typedefs.ssp", Map("typedefs" -> program.typedefs, "baseName" -> source.capitalizedBaseName)) %>
#end
#for (cls <- program.structs)
<% render("class.ssp", Map("cls" -> cls, "clsContainer" -> "", "pkg" -> pkg)) %>
#end
#for (union <- program.unions)
<%-- /* TODO: make this support real unions */ --%>
<% render("class.ssp", Map("cls" -> union, "clsContainer" -> "", "pkg" -> pkg)) %>
#end
#for (exception <- program.exceptions)
<% render("exception.ssp", Map("cls" -> exception, "resolver" -> program.resolver, "pkg" -> pkg)) %>
#end
#for (service <- program.services)
<% render("service.ssp", Map("service" -> service, "resolver" -> program.resolver, "pkg" -> pkg)) %>
#end
