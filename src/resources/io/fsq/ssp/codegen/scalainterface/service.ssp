<%
// Copyright 2017 Foursquare Labs Inc. All Rights Reserved.

import _root_.io.fsq.spindle.codegen.runtime.{RenderType, ScalaClass, ScalaFunction, ScalaService,
  TypeReferenceResolver}
import _root_.io.fsq.spindle.__shaded_for_spindle_bootstrap__.descriptors.{Annotation, Field, Requiredness, Struct}
%>
<%@ val service: ScalaService %>
<%@ val resolver: TypeReferenceResolver %>
<%@ val pkg: String %>
<%
val parentServiceName = service.parentServiceName.getOrElse("")
%>\
trait Has${service.name} {
  def get${service.name}: ${service.name}.ServiceIface
}

object ${service.name} extends runtime.ServiceDescriptor {
  import com.twitter.finagle
  import com.twitter.util
<%--  Synchronous client interface --%>
  trait Iface #if (parentServiceName != "")extends ${parentServiceName}.Iface #(end){
#for (function <- service.functions)
<% render("service_funcsig.ssp", Map("function" -> function, "resolver" -> resolver, "pkg" -> pkg)) %>
#end
  }

<%-- Asynchronous client interface --%>
  trait AsyncIface #if (parentServiceName != "")extends ${parentServiceName}.AsyncIface #(end){
#for (function <- service.functions)
<% render("service_funcsig.ssp", Map(
     "function" -> function,
     "resolver" -> resolver,
     "addResultHandlerArg" -> true,
     "forceReturnTypeToUnit" -> true,
     "checkedExceptions" -> Seq("thrift.TException"),
     "pkg" -> pkg)) %>
#end
  }

<%-- Service interface (uses com.twitter.util.Future). --%>
  trait ServiceIface #if (parentServiceName != "")extends ${parentServiceName}.ServiceIface #(end){
#for (function <- service.functions)
<% render("service_funcsig.ssp", Map(
          "function" -> function,
          "resolver" -> resolver,
          "wrapReturnTypeInFuture" -> true,
          "pkg" -> pkg)) %>
#end
  }

<%-- Client implementation that can call this service. --%>
  class Client(iprot: thrift.protocol.TProtocol, oprot: thrift.protocol.TProtocol) extends #if (parentServiceName != "")${parentServiceName}.Client#(else)thrift.TServiceClient#(end)(iprot, oprot) with Iface {
    def this(prot: thrift.protocol.TProtocol) = this(prot, prot)
  }

  object Client {
    class Factory extends thrift.TServiceClientFactory[Client] {
    }
  }

<%-- Asynchronous client --%>
  class AsyncClient(
    protocolFactory: thrift.protocol.TProtocolFactory,
    clientManager: thrift.async.TAsyncClientManager,
    transport: thrift.transport.TNonblockingTransport
  ) extends #if (parentServiceName != "")${parentServiceName}.AsyncClient#(else)thrift.async.TAsyncClient#(end)(protocolFactory, clientManager, transport) with AsyncIface

  object AsyncClient {
    class Factory(
      clientManager: thrift.async.TAsyncClientManager,
      protocolFactory: thrift.protocol.TProtocolFactory
    ) extends thrift.async.TAsyncClientFactory[AsyncClient] {
      def getAsyncClient(transport: thrift.transport.TNonblockingTransport): AsyncClient
    }
  }

  class ServiceToClient(
    service: finagle.Service[finagle.thrift.ThriftClientRequest, Array[Byte]],
    protocolFactory: thrift.protocol.TProtocolFactory,
    deserializationPoolOpt: Option[util.FuturePool] = None
  ) extends #if (parentServiceName != "")${parentServiceName}.ServiceToClient(service, protocolFactory) with ServiceIface #(else)ServiceIface#(end)

  class ServiceToProtocolClient(
    service: finagle.Service[(thrift.protocol.TMessage, thrift.TBase[_, _], Boolean), thrift.protocol.TProtocol],
    deserializationPoolOpt: Option[util.FuturePool]
  ) extends #if (parentServiceName != "")${parentServiceName}.ServiceToProtocolClient(service, deserializationPoolOpt) with ServiceIface #(else)ServiceIface#(end)

<%-- Processor - processes requests --%>
  class Processor[I <: Iface](iface: I)
    extends #if (parentServiceName != "")${parentServiceName}.Processor[I]#(else)thrift.TBaseProcessor[I]#(end)(iface, processMap)
    with thrift.TProcessor

  object Processor {
<%-- Generate an thrift.ProcessFunction for each of the service's functions. --%>
#for (function <- service.functions)
    class ${function.name}[I <: Iface] extends thrift.ProcessFunction[I, ${service.name}_${function.name}_args]("${function.name}")
#end
  }

<%-- Finagle Service
     Unlike the Thrift compiler, we do not create a Map[String, (TProtocol, Integer) => Array[Byte]] because it is
     easy enough in Scala to use match.
--%>
  class Service(
    iface: ServiceIface,
    protocolFactory: thrift.protocol.TProtocolFactory
#if (parentServiceName != "")
  ) extends ${parentServiceName}.Service(iface, protocolFactory)
#else
  ) extends finagle.Service[Array[Byte], Array[Byte]]
#end
    with runtime.ServiceDescriptor {

    override def serviceName = ${service.name}.serviceName
    override def functionDescriptors: Seq[runtime.FunctionDescriptor[_,_]] = ${service.name}.functionDescriptors
  }
}
