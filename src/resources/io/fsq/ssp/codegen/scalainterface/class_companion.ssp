<%
  // Copyright 2017 Foursquare Labs Inc. All Rights Reserved.
  import _root_.io.fsq.spindle.codegen.runtime.{PrimitiveRenderType, StructLike}
  import _root_.scala.collection.mutable.Set
%>
<%@ val cls: StructLike %>
<%@ val pkg: String %>
<%@ val clsContainer: String %>
<%
def escapeQuotes(str: String): String = str.replace("\"", "\\\"")
%>

object ${cls.name} extends ${cls.name}Meta {
<% render("class_companion_builder.ssp", Map("cls" -> cls, "pkg" -> pkg)) %>
  implicit val companionProvider: ${cls.name}CompanionProvider
  implicit val __$ordering: Ordering[${cls.name}]
}

class ${cls.name}Meta extends runtime.MetaRecord[${cls.name}, ${cls.name}Meta]
#for (pkField <- cls.primaryKeyField)
  with runtime.HasMetaPrimaryKey[${pkField.textUnscoped(pkg)}, ${cls.name}]
#end
  with runtime.RecordProvider[${cls.name}] \
#if (cls.annotations.contains("meta_extends"))
  with ${cls.annotations.getAll("meta_extends").mkString("\n    with ")} \
#end \
{
  <% render("class_companion_tfields.ssp", Map("cls" -> cls)) %>
  override def createRawRecord: Raw${cls.name}
  def apply(
    ${cls.fields.map(field => "%s: %s".format(field.escapedName, field.textUnscoped(pkg))).mkString(",\n    ")}
  ): ${cls.name}
<% render("class_companion_rfields.ssp", Map("cls" -> cls, "pkg" -> pkg)) %>
}

class ${cls.name}CompanionProvider extends runtime.CompanionProvider[${cls.name}] {
  type CompanionT = ${cls.name}Meta
}
