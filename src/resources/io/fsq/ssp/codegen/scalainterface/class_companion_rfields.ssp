<%
    // Copyright 2017 Foursquare Labs Inc. All Rights Reserved.
  import _root_.io.fsq.spindle.codegen.runtime._
%>
<%@ val cls: StructLike %>
<%@ val pkg: String %>
#for (field <- cls.fields)
<%
val text = field.textUnscoped(pkg)
val tpe = field.renderType match {
  case container1: Container1RenderType if field.isForeignKey =>
    s"runtime.ForeignKeySeqFieldDescriptor[${container1.elem.textUnscoped}, ${cls.name}, ${cls.name}Meta]"
  case container: ContainerRenderType if field.isForeignKey =>
    s"runtime.ForeignKeyFieldDescriptor[${text}, ${cls.name}, ${cls.name}Meta]"
  case bitfield: BitfieldStructRenderType =>
    val structName = bitfield.className
    s"runtime.BitfieldFieldDescriptor[${text}, ${cls.name}, ${cls.name}Meta, ${structName}, ${structName}Meta]"
  case exception: ExceptionRenderType =>
    s"runtime.ExceptionFieldDescriptor[${cls.name}, ${cls.name}Meta, ${text}.Struct, ${text}.StructMeta, ${text}]"
  case struct: StructRenderType =>
    s"runtime.StructFieldDescriptor[${cls.name}, ${cls.name}Meta, ${text}, ${text}Meta]"
  case _ =>
    s"runtime.OptionalFieldDescriptor[${text}, ${cls.name}, ${cls.name}Meta]"
}
%>
  val ${field.escapedName}: ${tpe}
#end
